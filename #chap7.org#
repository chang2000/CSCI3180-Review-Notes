* Chap7 Expressions and Assignemnt Statements
* Main Point: Evaluation
  Some issue:
  > Type mismatched

  > corcesion

  > short-circuit evaluation

* 7.2 Arithmetic Expressions
** operators
   unary, binary(usually *in-fix*, but in Perl, some are prefix), ternary
** operands
** parenthess
** function calls
   
** Operators Evaluation Order
   > *Precedence*
   ****************
   **
   unary
   */%
   binary +-
   ****************
   > *Associativity*
   > *conditional expressions*
   

** Operand Evaluation Order
   1.Variables
   2.constants
   3.parenthese
   4.funciton calls(side effect)
   ***************FINAL**************
   ALSO TWO APPRACH: *lazy* and *eager*
   My words: often the lazy on is used
#+BEGIN_SRC C
bar (int x, int y){
if x != 0{
        afsdfasdfasdfasdf y
    }else{
    return 0;
    }
}
bar(d,c/d)// thus, it is legal
#+END_SRC
* 7.3 Overloaded Operators
  Multiple use of operators(+ for add integer and catenation of string)
  User-defined can be harmfulllllll to readability
* 7.4 Type Conversions
mix mode

narrowing/widening
* 7.5 Relational and Boolean Expressions
** Relational Expressions
   > == and === in JS
* 7.6 Short Circuit Evaluation
  Without evaluating all the operands/operators


* 7.7 Assignments
  Something about prefix and postfix
#+BEGIN_SRC C
sum = ++ count
// count incremented, than assignmed to sum
sum = count++
// assigned to sun first, then incremented
-count++
// incremented first, then negated
#+END_SRC
Multiple Assignment in Perl, Ruby and Lua
(a,b) = (b,a)

